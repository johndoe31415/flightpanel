#!/usr/bin/python3
#
#	flightpanel - A Cortex-M4 based USB flight panel for flight simulators.
#	Copyright (C) 2017-2017 Johannes Bauer
#
#	This file is part of flightpanel.
#
#	flightpanel is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	flightpanel is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with flightpanel; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import re
import subprocess
import argparse
from FriendlyArgumentParser import FriendlyArgumentParser
from ELFSymbols import ELFSymbols

def memspec(text):
	pass

parser = FriendlyArgumentParser()
parser.add_argument("--rom", metavar = "start,length", type = memspec, action = "append", default = [ ], help = "Area to consider as ROM. Format is \"start,length\" and for either argument decimal or hexadecimal (prefix 0x) arguments are permissible as well as k, M suffixes (for kiB or MiB).")
parser.add_argument("--ram", metavar = "start,length", type = memspec, action = "append", default = [ ], help = "Area to consider as RAM. Format is \"start,length\" and for either argument decimal or hexadecimal (prefix 0x) arguments are permissible as well as k, M suffixes (for kiB or MiB).")
parser.add_argument("--prefix", metavar = "prefix", type = str, default = "arm-none-eabi-", help = "Toolchain prefix to use. Defaults to %(default)s.")
parser.add_argument("--verbose", action = "store_true", help = "Increase verbosity")
parser.add_argument("binary", metavar = "file", type = str, help = "ELF binary that contains the linked program")
args = parser.parse_args(sys.argv[1:])
print(args)

symbols = ELFSymbols(args.prefix, args.binary, verbose = args.verbose)
symbols.dump()
