#!/usr/bin/python3
#
#	flightpanel - A Cortex-M4 based USB flight panel for flight simulators.
#	Copyright (C) 2017-2017 Johannes Bauer
#
#	This file is part of flightpanel.
#
#	flightpanel is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	flightpanel is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with flightpanel; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import subprocess
from FriendlyArgumentParser import FriendlyArgumentParser

parser = FriendlyArgumentParser()
parser.add_argument("-l", "--threshold-step", metavar = "count", type = int, default = 20, help = "Threshold step to use when incrementing from min-threshold to max-threshold. Defaults to %(default)d.")
parser.add_argument("-t", "--min-threshold", metavar = "lvl", type = int, default = 20, help = "Minimal threshold level. Defaults to %(default)d.")
parser.add_argument("-T", "--max-threshold", metavar = "lvl", type = int, default = 235, help = "Maximal threshold level. Defaults to %(default)d.")
parser.add_argument("-f", "--fontsize-step", metavar = "inc", type = float, default = 1, help = "Increase of font size to choose between min-fontsize and max-fontsize. Defaults to %(default)d.")
parser.add_argument("-s", "--min-fontsize", metavar = "size", type = float, default = 20, help = "Minimal font size. Defaults to %(default).3f.")
parser.add_argument("-S", "--max-fontsize", metavar = "size", type = float, default = 20, help = "Minimal font size. Defaults to %(default).3f.")
parser.add_argument("-a", "--antialias", metavar = "method", choices = [ "default", "none", "gray", "subpixel", "fast", "good", "best" ], default = "default", help = "Antialiasing method to use when rasterizing the font. Can be one of %(choices)s and defaults to %(default)s.")
parser.add_argument("-v", "--verbose", action = "store_true", help = "Increase verbosity during generation.")
parser.add_argument("fontname", metavar = "fontname", type = str, help = "Name of the font to generate variants of.")
args = parser.parse_args(sys.argv[1:])

def fltrange(minval, maxval, step):
	(minval, maxval) = (min(minval, maxval), max(minval, maxval))
	value = minval
	while value <= maxval:
		yield value
		value += step

filename_prefix = args.fontname.lower().replace(" ", "-")
for fontsize in fltrange(args.min_fontsize, args.max_fontsize, args.fontsize_step):
	json_filename = "%s-%.3f.json" % (filename_prefix, fontsize)
	if args.verbose:
		print("Rasterizing %s with %.3f pt and %s antialiasing to %s" % (args.fontname, fontsize, args.antialias, json_filename))
	cmd = [ "./font-rasterize", "--fontsize=%.3f" % (fontsize), "--antialias=%s" % (args.antialias), args.fontname, json_filename ]
	if args.verbose:
		print(" ".join(cmd))
	subprocess.check_call(cmd)
	for threshold in fltrange(args.min_threshold, args.max_threshold, args.threshold_step):
		if args.verbose:
			print("Applying threshold %d to rasterized font." % (threshold))
		threshold = round(threshold)
		cmd = [ "./json-to-c.py", "--force", "--threshold", str(threshold), "--filename-include-threshold", "--create-pnm", json_filename ]
		if args.verbose:
			print(" ".join(cmd))
		subprocess.check_call(cmd)
