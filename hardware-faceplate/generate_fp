#!/usr/bin/python3
import sys
import collections
from XMLParser import XMLParser
from TransformationMatrix import TransformationMatrix

def px_to_mm(dpi):
	return dpi / 90 * 25.4

def convert_unit(strvalue):
	if strvalue.endswith("mm"):
		return float(strvalue[:-2])
	else:
		px = float(strvalue)
		return px_to_mm(px)

def apply_transforms(transforms):
	m = TransformationMatrix.identity()
	for transform in transforms:
		if transform.startswith("translate("):
			(offx, offy) = (float(x) for x in transform[9:].strip("()").split(","))
			m *= TransformationMatrix.translate(offx, offy)
		elif transform.startswith("matrix("):
			coeffs = list(float(x) for x in transform[6:].strip("()").split(","))
			m *= TransformationMatrix(*coeffs)
		else:
			raise Exception(NotImplemented, transform)
	return m

def get_pos(matrix):
	(posx, posy) = (matrix.e, matrix.f)

	# Convert into mm, 90 dpi
	posx = px_to_mm(posx)
	posy = px_to_mm(posy)

	return (posx, posy)

def get_matrix(item, skip = 0):
	transforms = [ ]
	while item is not None:
		if item.get("transform") is not None:
			transforms.append(item["transform"])
		item = item.getparent()
#	print(transforms)
	if skip > 0:
		transforms = transforms[:-skip]
	return apply_transforms(transforms)

class ComponentNames(object):
	def __init__(self):
		self._ids = collections.defaultdict(int)
	
	def get(self, name):
		self._ids[name] += 1
		return name + "_" + str(self._ids[name])

svg = XMLParser().parsefile(sys.argv[1])
#svg = XMLParser().parsefile("test.svg")
#svg.dump()

width_mm = convert_unit(svg["width"])
height_mm = convert_unit(svg["height"])
print("var fp = new Frontpanel(\"instruments\", thick_2mm, %f, %f, alu_elox, elox_natural);" % (width_mm, height_mm))
print("AddFrontpanel(fp);")
print()
cnames = ComponentNames()
master_items = { }


for item in svg.search("use"):
	xlink = item["xlink:href"]
	if xlink not in master_items:
		master = svg.searchunique("g", id = xlink.lstrip("#"))
		label = master["inkscape:label"]

		# Find reference element within master
		try:
			master_ref = master.searchunique("circle", **{ "inkscape:label": "#ref" })
		except Exception as e:
			print(e)
			print("No reference for %s" % (label))
			sys.exit(1)
		
		master_matrix = get_matrix(master_ref)
		master_refpt = (float(master_ref["cx"]), float(master_ref["cy"]))
		master_items[xlink] = (label, master_matrix, master_refpt)


	(label, master_matrix, master_refpt) = master_items[xlink]

	item_matrix = get_matrix(item, skip = 1)
	(x, y) = (master_matrix * item_matrix).apply(master_refpt[0], master_refpt[1])

	(x, y) = (px_to_mm(x), px_to_mm(y))
	y = width_mm - y
	cname = cnames.get(label[1:])

	if label in [ "#gled", "#yled", "#rled" ]:
		print("var %s = new DrillHole(\"%s\", 6);" % (cname, cname))
		print("fp.AddElement(%s, %f, %f);" % (cname, x, y))		
	elif label == "#momentary":
		print("var %s = new DrillHole(\"%s\", 6);" % (cname, cname))
		print("fp.AddElement(%s, %f, %f);" % (cname, x, y))
	elif label == "#rotary":
		print("var %s = new DrillHole(\"%s\", 6);" % (cname, cname))
		print("fp.AddElement(%s, %f, %f);" % (cname, x, y))
	elif label == "#flip":
		print("var %s = new DrillHole(\"%s\", 6);" % (cname, cname))
		print("fp.AddElement(%s, %f, %f);" % (cname, x, y))
		print("var %s_mnt = new Line(\"%s_mnt\", 2).SetColor(engrave_no_color).SetTool(cutter_1_0mm);" % (cname, cname))
		print("fp.AddElement(%s_mnt, %f, %f);" % (cname, x, y + (13 / 2)))
	elif label == "#lcd":
		print("var %s = new RectHole(\"%s\", 29.4, 12.3, 1);" % (cname, cname))
		print("fp.AddElement(%s, %f, %f);" % (cname, x, y))
	elif label == "#mounting":
		print("var %s = new DrillHole(\"%s\", 3).SetCountersink(sink_74A_M3);" % (cname, cname))
		print("fp.AddElement(%s, %f, %f);" % (cname, x, y))
	else:
		print("// WARNING: Unused element '%s'" % (label))
	print()

for item in svg.search("text"):
	text = item.getcdata()
	(x, y) = get_matrix(item).apply(float(item["x"]), float(item["y"]))
	
	(x, y) = (px_to_mm(x), px_to_mm(y))
	y = width_mm - y
	y += 1.5

	cname = cnames.get("text")
	print("var %s = new TextEngraving(\"%s\", \"%s\");" % (cname, cname, text))
	print("fp.AddElement(%s, %f, %f);" % (cname, x, y))
	print()

